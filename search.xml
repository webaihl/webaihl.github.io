<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git命令记录</title>
    <url>/2020/03/17/git%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="1、跳到之前的分支"><a href="#1、跳到之前的分支" class="headerlink" title="1、跳到之前的分支"></a>1、跳到之前的分支</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout - //和cd -类似</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2、查看历史记录"><a href="#2、查看历史记录" class="headerlink" title="2、查看历史记录"></a>2、查看历史记录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 每个提交在一行内显示</span></span><br><span class="line">git log --oneline</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在所有提交日志中搜索包含「bug」的提交</span></span><br><span class="line">git log --all --grep='bug'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取某人的提交日志</span></span><br><span class="line">git log --author="web"</span><br></pre></td></tr></table></figure>

<h3 id="3、更新本地仓库和远程一致-丢弃本地的修改"><a href="#3、更新本地仓库和远程一致-丢弃本地的修改" class="headerlink" title="3、更新本地仓库和远程一致(丢弃本地的修改)"></a>3、更新本地仓库和远程一致(丢弃本地的修改)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line">git checkout master</span><br><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure>

<h3 id="4、替换最近一次未提交的commit"><a href="#4、替换最近一次未提交的commit" class="headerlink" title="4、替换最近一次未提交的commit"></a>4、替换最近一次<strong>未提交</strong>的commit</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编辑上次commit message(push之后也可以更改)</span></span><br><span class="line">git commit --amend -m "更好的提交日志"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在上次提交中附加一些内容，保持提交日志不变(push之后修改，可能会导致冲突)</span></span><br><span class="line">git add . &amp;&amp; git commit --amend --no-edit</span><br><span class="line"><span class="meta">#</span><span class="bash"> 空提交 —— 可以用来重新触发 CI 构建</span></span><br><span class="line">git commit --allow-empty -m "script"</span><br></pre></td></tr></table></figure>

<h3 id="5、reset命令"><a href="#5、reset命令" class="headerlink" title="5、reset命令"></a>5、reset命令</h3><blockquote>
<p>Working (未add)&gt;= Staging(add)&gt;= Repo(commit)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 只动repo, 只是HEAD重置到最新一次提交,撤销commit操作，不撤销add，不会删除本地代码</span></span><br><span class="line">git reset --soft &lt;commit&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 动repo还有staging，撤销add和commit操作，不会删除本地代码</span></span><br><span class="line">git reset --mixed &lt;commit&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 动repo还有staging还有working, 丢弃本地所有更改，删除本地代码</span></span><br><span class="line">git reset --hard &lt;commit&gt;</span><br></pre></td></tr></table></figure>

<h3 id="6、标签tag"><a href="#6、标签tag" class="headerlink" title="6、标签tag"></a>6、标签tag</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> git tag 显示标签</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认为HEAD，也可以指定一个commit id</span></span><br><span class="line">git tag &lt;tagname&gt; [commmit id]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定标签信息</span></span><br><span class="line">git tag -a &lt;tagname&gt; [commmit id] -m "desc"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 推送tag</span></span><br><span class="line">git push origin &lt;tagname&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除标签</span></span><br><span class="line">git tag -d &lt;tagname&gt;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/16/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<a id="more"></a>

<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<h3 id="Algolia"><a href="#Algolia" class="headerlink" title="Algolia"></a>Algolia</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo algolia</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
  <entry>
    <title>redis基础</title>
    <url>/2020/03/07/Redis%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="Reis基础"><a href="#Reis基础" class="headerlink" title="Reis基础"></a>Reis基础</h2><h3 id="一、什么是redis"><a href="#一、什么是redis" class="headerlink" title="一、什么是redis"></a>一、什么是redis</h3><blockquote>
<p>Redis是一个开源（BSD许可）的基于内存的数据结构存储，用作数据库，缓存和消息代理。</p>
</blockquote>
<a id="more"></a>

<h3 id="二、redis为什么这么快"><a href="#二、redis为什么这么快" class="headerlink" title="二、redis为什么这么快"></a>二、redis为什么这么快</h3><ul>
<li>基于内存的操作</li>
<li>IO的多路复用</li>
<li>单线程架构</li>
</ul>
<h3 id="三、redis连接"><a href="#三、redis连接" class="headerlink" title="三、redis连接"></a>三、redis连接</h3><blockquote>
<p><strong>–raw</strong>防止中文乱码</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli -h 主机 -p 端口 -a 密码 --raw</span><br></pre></td></tr></table></figure>

<h3 id="四、基本数据结构"><a href="#四、基本数据结构" class="headerlink" title="四、基本数据结构"></a>四、基本数据结构</h3><h4 id="1、str字符串"><a href="#1、str字符串" class="headerlink" title="1、str字符串"></a>1、str字符串</h4><blockquote>
<p>字符串是Redis最基础的数据结构。值可以是字符串(JSON,XML)、数字(整数、浮点型)、或者是二进制(img、video)，最大值不能超过512MB。</p>
</blockquote>
<ul>
<li><p>常用命令</p>
<ol>
<li><p>设置值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">set key value [ex seconds] [px millisends] [nx|xx]</span><br><span class="line">	setex key seconds value</span><br><span class="line">	setnx key value</span><br><span class="line">	setxx key value</span><br><span class="line">mset key value [v1 v2 v3] 	<span class="comment">//一次性设置多个值</span></span><br></pre></td></tr></table></figure>

<ol>
<li>ex key的秒级过期时间</li>
<li>px key的毫秒级过期时间</li>
<li>nx key必须不存在，命令才能执行生效</li>
<li>xx key必须存在，命令才能执行生效</li>
</ol>
</li>
<li><p>获取值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">exists key  <span class="comment">//键是否存在</span></span><br><span class="line">get key <span class="comment">//获取单个值</span></span><br><span class="line">mget key [k1 k2 k3] <span class="comment">//获取多个值</span></span><br></pre></td></tr></table></figure>

<ul>
<li>存在，返回key的value</li>
<li>不存在，返回nil</li>
</ul>
</li>
<li><p>计数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">incr key</span><br><span class="line">incrby key incrment</span><br><span class="line">decrby ke decrment</span><br><span class="line">incrbyfloat key incrment</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>内部编码</p>
<ol>
<li><p>int: 8个字节的证书</p>
</li>
<li><p>embstr: 小于等于39个字节的str</p>
</li>
<li><p>raw: 大于39个的str</p>
</li>
</ol>
</li>
<li><p>使用场景</p>
<ol>
<li>缓存(set)</li>
<li>计数(incr)</li>
<li>共享session(保证高可用、拓展)</li>
<li>限速(短信验证码次数)</li>
</ol>
</li>
</ul>
<h4 id="2、hash哈希"><a href="#2、hash哈希" class="headerlink" title="2、hash哈希"></a>2、hash哈希</h4><ul>
<li><p>常用命令</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hset key filed value <span class="comment">// 设置值</span></span><br><span class="line">hget key filed <span class="comment">// 获取值</span></span><br><span class="line">hdel key filed [f1 f2]<span class="comment">//删除一个或多个filed</span></span><br><span class="line">hlen key <span class="comment">// key的中field的个数</span></span><br><span class="line">hmset key filed value [f1 v1 f2 v2] <span class="comment">//设置多个</span></span><br><span class="line">hmget key filed [f1 f2 f3] <span class="comment">//获取多个</span></span><br><span class="line">exixst key field <span class="comment">//key中是否存在field</span></span><br><span class="line">hkeys key <span class="comment">//所有的field</span></span><br><span class="line">hvals key<span class="comment">//所有value</span></span><br><span class="line">hgetall key <span class="comment">// field和value。会导致redis阻塞，可用hscan代替</span></span><br><span class="line">hincrby key field </span><br><span class="line">hincybyflaot key field</span><br><span class="line">hstrlen key field <span class="comment">//value的长度</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>内部编码</p>
<ol>
<li>ziplist。压缩列表紧凑的连续存储，更节省内存</li>
<li>hashtable。ziplist不满足要求时，hashtable会提高读写效率</li>
</ol>
</li>
<li><p>场景</p>
<ol>
<li>用于存储关系数据库中的表数据，会更加直观</li>
</ol>
</li>
</ul>
<h4 id="3、list列表"><a href="#3、list列表" class="headerlink" title="3、list列表"></a>3、list列表</h4><blockquote>
<p>存储多个有序的元素，index从0开始</p>
</blockquote>
<ul>
<li><p>常用命令</p>
<ol>
<li><p>添加操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rpush|lpush key value [v1 v2] <span class="comment">// 两端添加元素</span></span><br><span class="line">linsert key before|after pivot value <span class="comment">//在等于pivot的前后插入</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查找</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定区间内的元素。 左-&gt;右(0 — N-1);右-&gt;左(-1 —— -N) </span></span><br><span class="line">lrange key start end </span><br><span class="line">lindex key index <span class="comment">//指定下边的元素</span></span><br><span class="line">llen key <span class="comment">//list的长度</span></span><br></pre></td></tr></table></figure></li>
<li><p>删除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//两端删除元素</span></span><br><span class="line">lpop|rpop key</span><br><span class="line"><span class="comment">//根据索引修剪, [a, b]</span></span><br><span class="line">ltrim key start end</span><br><span class="line"><span class="comment">//找出count个值等于value的元素进行删除</span></span><br><span class="line">lrem key count value</span><br></pre></td></tr></table></figure>

<ol>
<li>count&gt;0 , 左→右，删除最多count个值</li>
<li>count&lt;0, 左←右，删除最多abs(count)个值</li>
<li>count=0,删除所有</li>
</ol>
</li>
<li><p>修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lset key index newVal <span class="comment">//修改指定index的值为newVal</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>阻塞操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">blpop| brpop key [k1 k2] timeout</span><br></pre></td></tr></table></figure>

<pre><code>1. list为空时，等待timeout秒返回</code></pre><ol start="2">
<li>不为空时，立即返回</li>
</ol>
<ul>
<li><p>内部编码</p>
<ol>
<li><p>ziplist.</p>
</li>
<li><p>linkedlist. 元素个数&gt;512 or 某个元素&gt;64个字节</p>
</li>
</ol>
</li>
</ul>
</li>
</ol>
<ul>
<li><p>场景</p>
<ol>
<li>消息队列<ol>
<li>lpush+lpop=Stack</li>
<li>lpush+rpop=Queue</li>
<li>lpush+ltrim = 有限集合</li>
<li>lpush + brpop = 消息队列</li>
</ol>
</li>
<li>文章列表</li>
</ol>
</li>
</ul>
</li>
</ul>
<h4 id="4、set集合"><a href="#4、set集合" class="headerlink" title="4、set集合"></a>4、set集合</h4><blockquote>
<p>保存多个无序不重复的元素</p>
</blockquote>
<ul>
<li><p>常用命令</p>
<ol>
<li><p>添加元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sadd key ele [e1 e2]</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">srem key ele [e1 e2]</span><br></pre></td></tr></table></figure>
</li>
<li><p>元素个数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">scard key <span class="comment">// O(1) 获取内部变量</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>是否存在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sismember key ele <span class="comment">// return 0 / 1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>随机返回指定个数的元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">srandmember key count</span><br></pre></td></tr></table></figure>
</li>
<li><p>随机弹出指定个数的元素(会删除)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spop key count <span class="comment">//redis version &gt;= 3.2才支持count</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取所有元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">smembers key <span class="comment">// 尽量使用sscan</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>集合间操作</p>
<ol>
<li><p>交集 inter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sinter key [k1 k2]</span><br><span class="line"><span class="comment">// 操作耗时的情况下，+store将结果保存在destination变量中</span></span><br><span class="line">sinterstore destination key [k1 k2]</span><br></pre></td></tr></table></figure>
</li>
<li><p>并集 union</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sunion key [k1 k2]</span><br><span class="line"><span class="comment">// 操作耗时的情况下，+store将结果保存在destination变量中</span></span><br><span class="line">sunionstore destination key [k1 k2]</span><br></pre></td></tr></table></figure>
</li>
<li><p>差集 diff</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sdiff key [k1 k2]</span><br><span class="line"><span class="comment">// 操作耗时的情况下，+store将结果保存在destination变量中    </span></span><br><span class="line">sdiffstore destination key [k1 k2]</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>内部编码</p>
<ol>
<li>intset. 元素个数默认小于512时</li>
<li>hashtable</li>
</ol>
</li>
<li><p>场景</p>
<ol>
<li>用户喜好标签</li>
</ol>
</li>
</ul>
]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL常用时间函数</title>
    <url>/2020/03/01/MySQL%E5%B8%B8%E7%94%A8%E6%97%B6%E9%97%B4%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="MySQL常用时间函数"><a href="#MySQL常用时间函数" class="headerlink" title="MySQL常用时间函数"></a>MySQL常用时间函数</h2><p><a href="https://www.cnblogs.com/ggjucheng/p/3352280.html" target="_blank" rel="noopener">参考1</a> <a href="https://www.jianshu.com/p/394b75784738" target="_blank" rel="noopener">参考2</a></p>
<h3 id="一、获取当前的时间"><a href="#一、获取当前的时间" class="headerlink" title="一、获取当前的时间"></a>一、获取当前的时间</h3><a id="more"></a>

<h4 id="1、now-sysdate"><a href="#1、now-sysdate" class="headerlink" title="1、now/sysdate"></a>1、now/sysdate</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select now(); -- 日期和时间 </span><br><span class="line">+---------------------+</span><br><span class="line">| now()               |</span><br><span class="line">+---------------------+</span><br><span class="line">| 2020-03-01 20:45:22 |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure>

<h4 id="2、now和sysdate区别"><a href="#2、now和sysdate区别" class="headerlink" title="2、now和sysdate区别"></a>2、now和sysdate区别</h4><blockquote>
<p>now() 在SQL<strong>语句</strong>执行时值就确定了， sysdate() 在<strong>函数</strong>执行时动态得到值</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select sysdate(),now(), sleep(3), sysdate(),now();</span><br><span class="line">+---------------------+---------------------+----------+---------------------+---------------------+</span><br><span class="line">| sysdate()           | now()               | sleep(3) | sysdate()           | now()               |</span><br><span class="line">+---------------------+---------------------+----------+---------------------+---------------------+</span><br><span class="line">| 2020-03-01 20:51:32 | 2020-03-01 20:51:32 |        0 | 2020-03-01 20:51:35 | 2020-03-01 20:51:32 |</span><br><span class="line">+---------------------+---------------------+----------+---------------------+---------------------+</span><br></pre></td></tr></table></figure>

<h4 id="3、获取当前时间戳"><a href="#3、获取当前时间戳" class="headerlink" title="3、获取当前时间戳"></a>3、获取当前时间戳</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select current_timestamp, sleep(3),current_timestamp();</span><br><span class="line">+---------------------+----------+---------------------+</span><br><span class="line">| current_timestamp   | sleep(3) | current_timestamp() |</span><br><span class="line">+---------------------+----------+---------------------+</span><br><span class="line">| 2020-03-01 20:53:18 |        0 | 2020-03-01 20:53:18 |</span><br><span class="line">+---------------------+----------+---------------------+</span><br></pre></td></tr></table></figure>

<h3 id="二、时间、时间戳以及字符串之间的转换"><a href="#二、时间、时间戳以及字符串之间的转换" class="headerlink" title="二、时间、时间戳以及字符串之间的转换"></a>二、时间、时间戳以及字符串之间的转换</h3><ul>
<li>涉及函数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date_format(date,format), time_format(time,format) -- date&#x2F;time转字符串</span><br><span class="line">str_to_date(str, format) -- 字符串转date&#x2F;time</span><br><span class="line">unix_timestamp(str) -- 字符串时间戳</span><br><span class="line">	unix_timestamp(),</span><br><span class="line">	unix_timestamp(date),		</span><br><span class="line">from_unixtime(timestamp) -- 时间戳转字符串</span><br><span class="line">	from_unixtime(unix_timestamp),</span><br><span class="line">	from_unixtime(unix_timestamp,format)</span><br></pre></td></tr></table></figure>

<h4 id="1、字符串-lt-–-gt-时间"><a href="#1、字符串-lt-–-gt-时间" class="headerlink" title="1、字符串&lt;–&gt;时间"></a>1、字符串&lt;–&gt;时间</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select str_to_date(&#39;2020-03-01 09:12:24&#39;,&#39;%Y-%m-%d %h:%i:%s&#39;) </span><br><span class="line">	-- 2020-03-01 09:12:24</span><br><span class="line">select date_format(now(), &#39;%Y-%m-%d %h:%i:%s&#39;)</span><br><span class="line">	-- 2020-03-01 09:12:24</span><br></pre></td></tr></table></figure>

<h4 id="2、时间戳-lt-–-gt-字符串"><a href="#2、时间戳-lt-–-gt-字符串" class="headerlink" title="2、时间戳&lt;–&gt;字符串"></a>2、时间戳&lt;–&gt;字符串</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select unix_timestamp(&#39;2020-03-01&#39;); </span><br><span class="line">	-- 1582992000   str to timestamp</span><br><span class="line">select from_unixtime(1582992000,&#39;%Y-%m-%d&#39;); </span><br><span class="line">	-- 2020-03-01  timestamp to str</span><br></pre></td></tr></table></figure>

<h4 id="3、时间-lt-–-gt-时间戳"><a href="#3、时间-lt-–-gt-时间戳" class="headerlink" title="3、时间&lt;–&gt;时间戳"></a>3、时间&lt;–&gt;时间戳</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select timestamp(now()); </span><br><span class="line">	-- 2020-03-01 21:42:05</span><br><span class="line">select unix_timestamp(&#39;2020-03-01&#39;); </span><br><span class="line">	-- 1582992000</span><br></pre></td></tr></table></figure>

<h3 id="三、日期计算"><a href="#三、日期计算" class="headerlink" title="三、日期计算"></a>三、日期计算</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@dt&#x3D;now()</span><br><span class="line">date_add()</span><br><span class="line">	select date_add(@dt, interval 1 day); -- add 1 day</span><br><span class="line">	select date_add(@dt, interval 1 hour); -- add 1 hour</span><br><span class="line">date_sub()</span><br><span class="line">	select date_sub(&#39;1998-01-05 00:00:00&#39;, interval &#39;1 1:1:1&#39; day_second);</span><br><span class="line">		-- 1998-01-03 22:58:59 </span><br><span class="line">datediff(date1,date2)-- 两个日期相减 date1 - date2，返回天数。</span><br><span class="line">timediff(time1,time2) -- 两个日期相减 time1 - time2，返回 time 差值</span><br></pre></td></tr></table></figure>

<h3 id="四、MySQL的format取值"><a href="#四、MySQL的format取值" class="headerlink" title="四、MySQL的format取值"></a>四、MySQL的format取值</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">值   含义</span><br><span class="line">秒   %S、%s   两位数字形式的秒（ 00,01, ..., 59）</span><br><span class="line">分   %I、%i   两位数字形式的分（ 00,01, ..., 59）</span><br><span class="line">小时  </span><br><span class="line">	%H  24小时制，两位数形式小时（00,01, ...,23）</span><br><span class="line">	%h  12小时制，两位数形式小时（00,01, ...,12）</span><br><span class="line">	%k  24小时制，数形式小时（0,1, ...,23）</span><br><span class="line">	%l  12小时制，数形式小时（0,1, ...,12）</span><br><span class="line">	%T  24小时制，时间形式（HH:mm:ss）</span><br><span class="line">	%r   12小时制，时间形式（hh:mm:ss AM 或 PM）</span><br><span class="line">	%p  AM上午或PM下午</span><br><span class="line">周      </span><br><span class="line"> 	%W 一周中每一天的名称（Sunday,Monday, ...,Saturday）</span><br><span class="line"> 	%a 一周中每一天名称的缩写（Sun,Mon, ...,Sat）</span><br><span class="line">	%w  以数字形式标识周（0&#x3D;Sunday,1&#x3D;Monday, ...,6&#x3D;Saturday）</span><br><span class="line">	%U  数字表示周数，星期天为周中第一天</span><br><span class="line">	%u  数字表示周数，星期一为周中第一天</span><br><span class="line">天   </span><br><span class="line">	%d  两位数字表示月中天数（01,02, ...,31）</span><br><span class="line">	%e   数字表示月中天数（1,2, ...,31）</span><br><span class="line"> 	%D 英文后缀表示月中天数（1st,2nd,3rd ...）</span><br><span class="line"> 	%j 以三位数字表示年中天数（001,002, ...,366）</span><br><span class="line">月   </span><br><span class="line">	%M  英文月名（January,February, ...,December）</span><br><span class="line">	%b  英文缩写月名（Jan,Feb, ...,Dec）</span><br><span class="line">	%m  两位数字表示月份（01,02, ...,12）</span><br><span class="line">	%c  数字表示月份（1,2, ...,12）</span><br><span class="line">年   </span><br><span class="line">	%Y  四位数字表示的年份（2015,2016...）</span><br><span class="line">	%y  两位数字表示的年份（15,16...）</span><br><span class="line">文字 %文字     直接输出文字内容</span><br><span class="line">        +--------------------------------------------+</span><br><span class="line">        | from_unixtime(1582992000,&#39;%Y-%m-%d %世界&#39;)  |</span><br><span class="line">        +--------------------------------------------+</span><br><span class="line">        | 2020-03-01 世界                             |</span><br><span class="line">        +--------------------------------------------+</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title>SSH公钥登录配置</title>
    <url>/2020/02/28/SSH%E5%85%AC%E9%92%A5%E7%99%BB%E5%BD%95%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="1、场景"><a href="#1、场景" class="headerlink" title="1、场景"></a>1、场景</h2><blockquote>
<p><strong>服务器A</strong>使用公钥免密登录<strong>服务器B</strong></p>
</blockquote>
<a id="more"></a>

<h2 id="2、生成公、私钥"><a href="#2、生成公、私钥" class="headerlink" title="2、生成公、私钥"></a>2、生成公、私钥</h2><ul>
<li><p>在<strong>服务器A</strong>的用户目录下查看是否存在<strong>id_rsa</strong>(私钥)和<strong>id_rsa.pub</strong>(公钥)文件，如果有直接进入<strong>3</strong></p>
<blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C  "xxxx@example.com"</span><br></pre></td></tr></table></figure>
</blockquote>
<p>“-t” 参数，表示我们请求建立一个 “RSA” 类型的密钥。RSA 是当前最新并且最安全的一种形式。<br>“-C” 参数，我们提供了一个注释，你可以把它想象为对这个密钥的一种描述或标签。例如使用你的 email 地址。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -C <span class="string">"xxxx@example.com"</span></span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/Users/xxxxx/.ssh/id_rsa):</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 可选择输入密码</span></span></span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 私、公钥存放位置(各系统用户目录的.ssh下)</span></span></span><br><span class="line">Your identification has been saved in /Users/xxxx/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /Users/xxxx/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">87:23:34:de:35:d0:f2:78:05:a4:78:1b:f1:6a:7e:be john@example.com</span><br><span class="line">The key's randomart image is:</span><br><span class="line">+--[ RSA 2048]----+</span><br><span class="line">|    . = o        |</span><br><span class="line">|   ..o..         |</span><br><span class="line">|  . o S .        |</span><br><span class="line">| . .      . o    |</span><br><span class="line">|  . + + . o      |</span><br><span class="line">|   . S = + o.    |</span><br><span class="line">|    . . + + . o  |</span><br><span class="line">|       o .       |</span><br><span class="line">|              o .|</span><br><span class="line">|              .Eo|</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure>

<h2 id="3、安装、使用秘钥文件"><a href="#3、安装、使用秘钥文件" class="headerlink" title="3、安装、使用秘钥文件"></a>3、安装、使用秘钥文件</h2><ul>
<li><p>将<strong>2</strong>中生成的公钥文件，复制在<strong>服务器B</strong>的用户目录下的.ssh目录下</p>
</li>
<li><p>在<strong>服务器A</strong>中使用以下命令登录进<strong>服务器B</strong></p>
<blockquote>
<p>ssh -i   ${公钥文件路径}   ${user}@${host}  -p ${port}</p>
</blockquote>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>python操作SQLite</title>
    <url>/2019/07/18/python%E6%93%8D%E4%BD%9CSQLite/</url>
    <content><![CDATA[<p>[TOC]</p>
<h3 id="一、安装sqlite3模块"><a href="#一、安装sqlite3模块" class="headerlink" title="一、安装sqlite3模块"></a>一、安装sqlite3模块</h3><blockquote>
<p>pip install sqlite3</p>
</blockquote>
<p>没有网络的可以通过<a href="https://pypi.org/" target="_blank" rel="noopener">pypi</a>下载离线包安装</p>
<a id="more"></a>

<p>python离线安装模块，可能用到的语法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当前python env环境的所有依赖模块信息</span></span><br><span class="line">pip freeze &gt; requirement.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载requirement.txt中的模块到deps目录</span></span><br><span class="line">pip download -d deps/  -r requirements.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># ./deps 离线安装包的目录</span></span><br><span class="line">pip install --no-index --find-links=./deps/ -r requirement.txt</span><br></pre></td></tr></table></figure>

<h3 id="二、操作sqlite"><a href="#二、操作sqlite" class="headerlink" title="二、操作sqlite"></a>二、操作sqlite</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_db</span><span class="params">()</span>:</span></span><br><span class="line">    conn = sqlite3.connect(<span class="string">'tables.db'</span>)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(<span class="string">"""CREATE TABLE IF NOT EXISTS test_table (</span></span><br><span class="line"><span class="string">                db_name vachar(255)  NOT NULL UNIQUE,</span></span><br><span class="line"><span class="string">                tables_info  TEXT NOT NULL</span></span><br><span class="line"><span class="string">                );"""</span> </span><br><span class="line">             )</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.commit()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(infos)</span>:</span></span><br><span class="line">    conn = sqlite3.connect(<span class="string">'test.db'</span>)</span><br><span class="line"></span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.executemany(<span class="string">'replace into tables_of_db (db_name, tables_info) values (?,?)'</span>, infos)</span><br><span class="line"></span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.commit()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(db_name)</span>:</span></span><br><span class="line">    conn = sqlite3.connect(<span class="string">'test.db'</span>)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(<span class="string">'select db_name, tables_info from tables_of_db where db_name=?'</span>, (db_name,))</span><br><span class="line"></span><br><span class="line">    infos = cursor.fetchall()</span><br><span class="line"></span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line">    <span class="keyword">return</span> infos</span><br></pre></td></tr></table></figure>

<h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><ul>
<li>python3中可以使用<strong>with-open</strong>语法，自动关闭连接。</li>
<li><strong>replace into</strong>语法采用插入-更新的策略。记录不存在时直接插入，记录存在时会先删除再插入。如果删除过程中出现异常，则会导致该语句执行失败。</li>
<li><strong>cursor.executemany</strong>可以使用[(col_1,col_2),(col_1,col_2)]的数据结构进行批量插入。</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>python的字符串编码</title>
    <url>/2019/06/29/python%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<h2 id="python的字符串编码"><a href="#python的字符串编码" class="headerlink" title="python的字符串编码"></a>python的字符串编码</h2><p>[TOC]</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://foofish.net/why-python-encoding-is-tricky.html" target="_blank" rel="noopener">Python 编码为什么那么蛋疼？</a></p>
<p>使用过Python语言的开发人员应该都用到过字符串、碰到str的编码问题了。由于此类错误出现的比较频繁，所以利用此文做个记录。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">UnicodeEncodeError: <span class="string">'ascii'</span> codec can<span class="string">'t encode character '</span>\u2013<span class="string">' in position 9741: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="字节和字符"><a href="#字节和字符" class="headerlink" title="字节和字符"></a>字节和字符</h4><ul>
<li><a href="https://zh.wikipedia.org/wiki/字节" target="_blank" rel="noopener">字节</a>是表示用于编码单个<a href="https://zh.wikipedia.org/wiki/字符" target="_blank" rel="noopener">字符</a>所需要的比特数量。</li>
<li>字节的目的是便于计算机存储以及网络传输，如一段视频文件。</li>
<li>字符是为了便于人类阅读，对人类语言的描述，如一个汉字。</li>
</ul>
<h4 id="编码与解码"><a href="#编码与解码" class="headerlink" title="编码与解码"></a>编码与解码</h4><blockquote>
<p>编码(encode) —— 将字符变成字节，类似于java中的序列化</p>
</blockquote>
<blockquote>
<p>解码(decode) —— 将字节转成字符</p>
</blockquote>
<h4 id="str与unicode"><a href="#str与unicode" class="headerlink" title="str与unicode"></a>str与unicode</h4><p>在python中str本质上是一个<strong>字节</strong>序列。</p>
<p><a href="https://zh.wikipedia.org/wiki/Unicode" target="_blank" rel="noopener">Unicode</a>是为了解决传统的<a href="https://zh.wikipedia.org/wiki/字元編碼" target="_blank" rel="noopener">字符编码</a>方案的局限而产生的，本质上是属于<strong>字符</strong>系列。</p>
<p>因此可以得出<strong>str—&gt; decode –&gt;unicode –&gt; encode —&gt;str</strong>。</p>
<img src="/2019/06/29/python%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81/uni_str.png" class="" title="str与unicode相互转换"> 

<p>为了保证转换成功， decode和encode应该是同一种字符编码，如UTF-8。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>Shell重定向</title>
    <url>/2019/05/06/Shell%E9%87%8D%E5%AE%9A%E5%90%91/</url>
    <content><![CDATA[<h2 id="Shell重定向"><a href="#Shell重定向" class="headerlink" title="Shell重定向"></a>Shell重定向</h2><p>[TOC]</p>
<h3 id="一、文件描述符"><a href="#一、文件描述符" class="headerlink" title="一、文件描述符"></a>一、文件描述符</h3><blockquote>
<p>标准输入stdin(<strong>0</strong>)，键盘输入</p>
<p>标准输出stdout(<strong>1</strong>)，正常信息屏幕输出</p>
<p>标准错误stderr(<strong>2</strong>)，错误信息屏幕输出</p>
</blockquote>
<a id="more"></a>

<h3 id="二、重定向"><a href="#二、重定向" class="headerlink" title="二、重定向"></a>二、重定向</h3><blockquote>
<p><strong>假设当前目录下只有文件a</strong></p>
</blockquote>
<h4 id="2、1-重定向到文件"><a href="#2、1-重定向到文件" class="headerlink" title="2、1  重定向到文件"></a>2、1  重定向到文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls  &gt; file #等价于 ls  1&gt;file </span><br><span class="line">ls a b &amp;&gt;file #标准输出和标准错误都充当项目到文件，等价 ls a b 1&gt;file 2&gt;file</span><br></pre></td></tr></table></figure>

<h4 id="2、2-重定向到-dev-null"><a href="#2、2-重定向到-dev-null" class="headerlink" title="2、2 重定向到/dev/null"></a>2、2 重定向到/dev/null</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls &gt; /dev/null #重定向到空设备，系统会丢弃输入。可用来解决后台服务的IO错误，如py的print语句没地方输出</span><br></pre></td></tr></table></figure>

<h4 id="2、3-重定向到输入输出通道"><a href="#2、3-重定向到输入输出通道" class="headerlink" title="2、3 重定向到输入输出通道"></a>2、3 重定向到输入输出通道</h4><blockquote>
<p><strong>&amp;</strong>提示Linux这不是文件而是文件描述符</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls b 2&gt;&amp;1 #将标准错误重定向到标准输出</span><br><span class="line">ls a 1&gt;&amp;2 #将标准输出重定向到标准错误</span><br></pre></td></tr></table></figure>















]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>重定向</tag>
      </tags>
  </entry>
  <entry>
    <title>授权码模式</title>
    <url>/2019/04/24/%E6%8E%88%E6%9D%83%E7%A0%81%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="授权码模式"><a href="#授权码模式" class="headerlink" title="授权码模式"></a>授权码模式</h2><p>[TOC]</p>
<blockquote>
<p>code —&gt; access_token —&gt; user_info</p>
</blockquote>
<a id="more"></a>

<h3 id="1、拼接url"><a href="#1、拼接url" class="headerlink" title="1、拼接url"></a>1、拼接url</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;[ip]:[port]&#x2F;[server_appname]&#x2F;oauth2&#x2F;authorize?client_id&#x3D;[client_id]&amp;response_type&#x3D;code&amp;redirect_uri&#x3D;[redirect_uri]</span><br></pre></td></tr></table></figure>

<h3 id="2、获取code"><a href="#2、获取code" class="headerlink" title="2、获取code"></a>2、获取code</h3><blockquote>
<p>重定向到redirect_uri,并添加返回的code参数—     content-<strong>location</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;[ip]:[port]&#x2F;[client_appname]&#x2F;oauth2-login?code&#x3D;[code]</span><br></pre></td></tr></table></figure>

<h3 id="3、通过code获取access-token"><a href="#3、通过code获取access-token" class="headerlink" title="3、通过code获取access_token"></a>3、通过code获取access_token</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;[ip]:[port]&#x2F;[server_appname]&#x2F;oauth2&#x2F;access_token?client_id&#x3D;[client_id]&amp;client_secret&#x3D;[client_secret]&amp;grant_type&#x3D;authorization_code&amp;code&#x3D;[code]&amp;redirect_uri&#x3D;[redirect_uri]</span><br></pre></td></tr></table></figure>

<h3 id="4、通过access-token获取user-info"><a href="#4、通过access-token获取user-info" class="headerlink" title="4、通过access_token获取user_info"></a>4、通过access_token获取user_info</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;[ip]:[port]&#x2F;[server_appname]&#x2F;oauth2&#x2F;user_info?access_token&#x3D;[access_token]</span><br></pre></td></tr></table></figure>

<h3 id="5、用户登出"><a href="#5、用户登出" class="headerlink" title="5、用户登出"></a>5、用户登出</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;[ip]:[port]&#x2F;[server_appname]&#x2F;oauth2&#x2F;logout?client_id&#x3D;[client_id]&amp;response_type&#x3D;code&amp;redirect_uri&#x3D;[redirect_uri]</span><br></pre></td></tr></table></figure>

<p>请求服务器的URL协议必须是<strong>https</strong>，如果没有相应的证书，可以使用httplib2:<br>    parser = httplib2.Http(disable_ssl_certificate_validation=True)<br>    parser.request(url)<br>取消证书的验证</p>
<p>由于请求的服务器不同，所以获取的Content-Type类型是不一致的，为了避免客户端接收数据时发生错误，我们可以按需修改客户端请求头的Accept参数。<br>Accept属于请求头(client),Content-Type属于实体头(server),Accept代表请求端（客户端）希望接受的数据类型。</p>
]]></content>
      <categories>
        <category>oauth2</category>
      </categories>
      <tags>
        <tag>oauth2</tag>
      </tags>
  </entry>
  <entry>
    <title>superset汉化</title>
    <url>/2019/04/15/superset%E6%B1%89%E5%8C%96/</url>
    <content><![CDATA[<h2 id="superset汉化"><a href="#superset汉化" class="headerlink" title="superset汉化"></a>superset汉化</h2><p>[TOC]</p>
<h4 id="一、语言配置"><a href="#一、语言配置" class="headerlink" title="一、语言配置"></a>一、语言配置</h4><p>修改superset根目录下的config.py中的如下配置(将<strong>BABEL_DEFAULT_LOCALE</strong>设置为<strong>zh</strong>)：</p>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Setup default language</span></span><br><span class="line">BABEL_DEFAULT_LOCALE = <span class="string">'zh'</span></span><br><span class="line"><span class="comment"># Your application default translation path</span></span><br><span class="line">BABEL_DEFAULT_FOLDER = <span class="string">'superset/translations'</span></span><br><span class="line"><span class="comment"># The allowed translation for you app</span></span><br><span class="line">LANGUAGES = &#123;</span><br><span class="line">    <span class="string">'en'</span>: &#123;<span class="string">'flag'</span>: <span class="string">'us'</span>, <span class="string">'name'</span>: <span class="string">'English'</span>&#125;,</span><br><span class="line">    <span class="string">'it'</span>: &#123;<span class="string">'flag'</span>: <span class="string">'it'</span>, <span class="string">'name'</span>: <span class="string">'Italian'</span>&#125;,</span><br><span class="line">    <span class="string">'fr'</span>: &#123;<span class="string">'flag'</span>: <span class="string">'fr'</span>, <span class="string">'name'</span>: <span class="string">'French'</span>&#125;,</span><br><span class="line">    <span class="string">'zh'</span>: &#123;<span class="string">'flag'</span>: <span class="string">'cn'</span>, <span class="string">'name'</span>: <span class="string">'Chinese'</span>&#125;,</span><br><span class="line">    <span class="string">'ja'</span>: &#123;<span class="string">'flag'</span>: <span class="string">'jp'</span>, <span class="string">'name'</span>: <span class="string">'Japanese'</span>&#125;,</span><br><span class="line">    <span class="string">'de'</span>: &#123;<span class="string">'flag'</span>: <span class="string">'de'</span>, <span class="string">'name'</span>: <span class="string">'German'</span>&#125;,</span><br><span class="line">    <span class="string">'pt_BR'</span>: &#123;<span class="string">'flag'</span>: <span class="string">'br'</span>, <span class="string">'name'</span>: <span class="string">'Brazilian Portuguese'</span>&#125;,</span><br><span class="line">    <span class="string">'ru'</span>: &#123;<span class="string">'flag'</span>: <span class="string">'ru'</span>, <span class="string">'name'</span>: <span class="string">'Russian'</span>&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二、汉化方式"><a href="#二、汉化方式" class="headerlink" title="二、汉化方式"></a>二、汉化方式</h4><blockquote>
<p>superset中po(实际读取的时mo文件)文件用来汉化python中的字段；json文件汉化jsx中的字段。</p>
</blockquote>
<p>1、修改py文件中需要汉化的字段</p>
<ul>
<li><p>修改/superset/translations/zh/LC_MESSAGES/messages.po文件，将msgid对应的msgstr改成对应的中文</p>
<blockquote>
<p>msgid:”ok”</p>
<p>msgstr:”确认”</p>
</blockquote>
</li>
<li><p>在superset根目录下使用如下命令，将po文件转化成mo文件：</p>
<blockquote>
<p>(sudo) pybabel compile -d translations</p>
</blockquote>
</li>
<li><p>在py文件中使用以下方式引用</p>
<blockquote>
<p>_{“ok”} </p>
<p>或者__{“ok”}</p>
</blockquote>
</li>
</ul>
<p>2、修改jsx文件中需要汉化的字段</p>
<ul>
<li><p>修改/superset/translations/zh/LC_MESSAGES/messages.json文件</p>
<blockquote>
<p>{“ok”:”确认”}</p>
</blockquote>
</li>
<li><p>在jsx文件中，使用如下方式汉化字段:</p>
<blockquote>
<p>t{(‘ok’)}</p>
</blockquote>
<p><strong>部分字段可能不能使用t语法，此时可以直接在代码使用汉字表示</strong></p>
</li>
<li><p>运行/superset/static/assets/js_build.sh文件，对jsx代码进行编译，使汉化文件生效。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>superset</category>
      </categories>
      <tags>
        <tag>superset</tag>
      </tags>
  </entry>
  <entry>
    <title>Superset安装步骤(Windows)</title>
    <url>/2018/08/15/Superset%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4-Windows/</url>
    <content><![CDATA[<h2 id="Supset安装步骤"><a href="#Supset安装步骤" class="headerlink" title="Supset安装步骤"></a>Supset安装步骤</h2><p>[TOC]</p>
<blockquote>
<p>本文主要记录uperset在Windows平台的安装步骤以及遇到的依赖配置问题</p>
</blockquote>
<a id="more"></a>

<h4 id="一、安装运行环境所需的依赖"><a href="#一、安装运行环境所需的依赖" class="headerlink" title="一、安装运行环境所需的依赖"></a>一、安装运行环境所需的依赖</h4><blockquote>
<p>安装node.js   python2.7  VCForPython27.msi (解决VC++依赖)</p>
</blockquote>
<h4 id="二、安装sasl"><a href="#二、安装sasl" class="headerlink" title="二、安装sasl"></a>二、安装sasl</h4><blockquote>
<p>通过<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#sasl" target="_blank" rel="noopener">lfd.uci.edu</a>下载对应的版本</p>
<p>如sasl-0.2.1-cp27-cp27m-win_amd64.whl，其中cpXX（XX是指python版本）</p>
<p>pip install  sasl-0.2.1-cp27-cp27m-win_amd64.whl</p>
</blockquote>
<h4 id="三、创建Python虚拟环境-可选"><a href="#三、创建Python虚拟环境-可选" class="headerlink" title="三、创建Python虚拟环境(可选)"></a>三、创建Python虚拟环境(可选)</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 建立d:\python\myproject 目录。</span></span><br><span class="line">d:</span><br><span class="line"><span class="meta">#</span><span class="bash">创建相应的目录</span></span><br><span class="line">md python</span><br><span class="line">cd python</span><br><span class="line">md myproject</span><br><span class="line">cd myproject</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到目录</span></span><br><span class="line">cd d:\python\myproject</span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化虚拟环境</span></span><br><span class="line">virtualenv env</span><br><span class="line"><span class="meta">#</span><span class="bash"> 激活虚拟环境</span></span><br><span class="line">env\Scripts\activate</span><br></pre></td></tr></table></figure>

<h4 id="四、安装Superset"><a href="#四、安装Superset" class="headerlink" title="四、安装Superset"></a>四、安装Superset</h4><blockquote>
<p>安装完前置依赖环境后，正式开始安装superset</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install superset</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建管理员帐号(以下操作都需要在<span class="variable">$&#123;Superset_Root&#125;</span>\libs\site-packages\superset\bin下)</span></span><br><span class="line">fabmanager create-admin --app superset</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化数据库 </span></span><br><span class="line">Python  superset db upgrade</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 加载例子</span></span><br><span class="line">Python superset load_examples</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化角色和权限</span></span><br><span class="line">Python superset init</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动服务，端口 8088, 使用 -p 更改端口号。</span></span><br><span class="line">Python superset runserver -d</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>superset</category>
      </categories>
      <tags>
        <tag>superset</tag>
      </tags>
  </entry>
  <entry>
    <title>Java跨域</title>
    <url>/2018/05/16/Java%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<h2 id="Java-跨域"><a href="#Java-跨域" class="headerlink" title="Java 跨域"></a>Java 跨域</h2><p>[TOC]</p>
<blockquote>
<p>IP、协议、端口任意一个不同，就会产生跨域。</p>
</blockquote>
<a id="more"></a>

<h3 id="跨域的实现方法"><a href="#跨域的实现方法" class="headerlink" title="跨域的实现方法"></a>跨域的实现方法</h3><h4 id="1、过滤器跨域"><a href="#1、过滤器跨域" class="headerlink" title="1、过滤器跨域"></a>1、过滤器跨域</h4><blockquote>
<p>过滤器拦截主要是重写javax.servlet.Filter中的doFilter(),以达到全局跨域的目的。</p>
</blockquote>
<p>doFilter()方法实现:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException,</span></span><br><span class="line"><span class="function">           ServletException </span>&#123;</span><br><span class="line">       HttpServletRequest req= (HttpServletRequest) request;</span><br><span class="line">       HttpServletResponse res = (HttpServletResponse) response;</span><br><span class="line">       res.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">       <span class="comment">//解决session丢失,value不能为*,需要指定具体</span></span><br><span class="line">       res.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, req.getHeader(<span class="string">"Origin"</span>));</span><br><span class="line">      <span class="comment">//解决session丢失, 是否允许浏览器携带用户身份信息（cookie）</span></span><br><span class="line">       res.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>);</span><br><span class="line">       res.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"*"</span>);</span><br><span class="line">       res.setHeader(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"3600"</span>);</span><br><span class="line">       res.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Origin, X-Requested-With, Content-		Type, Accept"</span>); </span><br><span class="line">      <span class="comment">//IE8引入</span></span><br><span class="line">      <span class="comment">//res.setHeader("XDomainRequestAllowed","1");</span></span><br><span class="line">       chain.doFilter(request, response);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果springMVC4.2+,可以继承 WebMvcConfigurerAdapter，实现addCorsMappings()方法</p>
</blockquote>
<p>addCorsMappings()方法实现:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">"/**/*"</span>).allowedOrigins(<span class="string">"*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>web.xml中的Filter配置:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>cors<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  		<span class="comment">&lt;!-- 实现类的位置 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.mmall.util.HandlerInterceptorUtil<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>cors<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2、拦截器配置"><a href="#2、拦截器配置" class="headerlink" title="2、拦截器配置"></a>2、拦截器配置</h4><blockquote>
<p>重写org.springframework.web.servlet.HandlerInterceptor接口中的preHandle()方法。</p>
</blockquote>
<p>preHandle()的实现:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                            Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      res.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">       <span class="comment">//解决session丢失，value不能为*</span></span><br><span class="line">       res.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, req.getHeader(<span class="string">"Origin"</span>));</span><br><span class="line">      <span class="comment">//解决session丢失, 是否允许浏览器携带用户身份信息（cookie）</span></span><br><span class="line">       res.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>);</span><br><span class="line">       res.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"*"</span>);</span><br><span class="line">       res.setHeader(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"3600"</span>);</span><br><span class="line">       res.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Origin, X-Requested-With, Content-		Type, Accept"</span>); </span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;*/</span><br></pre></td></tr></table></figure>

<p>dispatcher-servlet.xml(Spring配置文件)中拦截器的配置:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!--过滤所有请求，处理跨域请求问题   *只能匹配到下一层路径 **任意层--&gt;</span> </span><br><span class="line">     <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">       	<span class="comment">&lt;!-- HandlerInterceptor实现类的位置 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.mmall.util.HandlerInterceptorUtil"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span> &gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3、注解跨域配置"><a href="#3、注解跨域配置" class="headerlink" title="3、注解跨域配置"></a>3、注解跨域配置</h4><blockquote>
<p>在<strong>Spring框架4.2版本</strong>后,在Controller注解或者方法上方添加@CrossOrigin注解。</p>
<p><del>同时必须在@RequestMapping注解中<strong>指定Get、Post</strong>方式，否则无效。</del></p>
</blockquote>
<p>代码举例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @CrossOrigin(origins="http://test.com",maxAge=3600)</span></span><br><span class="line"><span class="meta">@CrossOrigin</span>(origins = <span class="string">"*"</span>, maxAge = <span class="number">3600</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/User"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>dispatcher-servlet.xml(Spring配置文件)中CROS的<strong>全局拦截</strong>配置:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:cors</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span> <span class="attr">allowed-methods</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:cors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="跨域session丢失"><a href="#跨域session丢失" class="headerlink" title="跨域session丢失"></a>跨域session丢失</h3><p>Java后端使用上面的1、2中方式，同时前端在Ajax中添加<strong>xhrFields:{withCredentials:true}</strong>配置，即可实现session跨域共享。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">		 xhrFields:&#123;<span class="attr">withCredentials</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">             type       :  <span class="string">'get'</span>,</span><br><span class="line">             url        :  <span class="string">''</span>,</span><br><span class="line">             dataType   :  <span class="string">"json"</span>,</span><br><span class="line">             data       :  <span class="literal">null</span>,</span><br><span class="line">             success    : <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                </span><br><span class="line">               &#125;,</span><br><span class="line">               error: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                   </span><br><span class="line">               &#125;</span><br><span class="line">                  </span><br><span class="line">           &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Session</tag>
      </tags>
  </entry>
  <entry>
    <title>mmall商城环境搭建</title>
    <url>/2018/04/05/mmall%E5%95%86%E5%9F%8E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="项目开发环境搭建"><a href="#项目开发环境搭建" class="headerlink" title="项目开发环境搭建"></a>项目开发环境搭建</h1><p>[TOC]</p>
<h2 id="后端环境"><a href="#后端环境" class="headerlink" title="后端环境"></a>后端环境</h2><h3 id="一、ZSH配置"><a href="#一、ZSH配置" class="headerlink" title="一、ZSH配置"></a>一、ZSH配置</h3><a id="more"></a>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install zsh</span><br><span class="line">sh -c "$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑配置文件,修改主题 ZSH_THEME=<span class="string">"maran"</span></span></span><br><span class="line">vim .vimrc</span><br><span class="line"><span class="meta">#</span><span class="bash"> 改变用户的默认shell</span></span><br><span class="line">chsh -s /bin/zsh [username]</span><br></pre></td></tr></table></figure>

<h3 id="二、环境变量"><a href="#二、环境变量" class="headerlink" title="二、环境变量"></a>二、环境变量</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 配置在 .zshrc(/etc/profile)中。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行 <span class="built_in">source</span> /etc/profile 生效</span></span><br><span class="line">JAVA_HOME=/home/web/own/jdk1.8.0_141  #(Java所在目录)</span><br><span class="line">CLASS_PATH=.:$JAVA_HOME/lib/</span><br><span class="line">TOMCAT_HOME=/home/web/own/apache-tomcat-8.5.29 #(tomcat所在目录)</span><br><span class="line">M2_HOME=/home/web/own/apache-maven-3.5.2 #(maven所在目录)</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$TOMCAT_HOME:$M2_HOME/bin   #(拼接Path)</span><br><span class="line">export JAVA_HOME  CLASS_PATH  TOMCAT_HOME PATH</span><br></pre></td></tr></table></figure>

<h3 id="三、Tomcat集群配置"><a href="#三、Tomcat集群配置" class="headerlink" title="三、Tomcat集群配置"></a>三、Tomcat集群配置</h3><blockquote>
<p>多主机: 将Tomcat实例配置在多个主机上，并且部署同样的代码。</p>
<p>单主机: 将Tomcat实例配置在一个主机上，配置不同的运行端口号。</p>
<p>通过Nginx进行请求的转发。</p>
</blockquote>
<p><strong>配置文件在${Tomacat}/conf/server.xml</strong></p>
<h4 id="1、字符配置"><a href="#1、字符配置" class="headerlink" title="1、字符配置"></a>1、字符配置</h4><blockquote>
<p>在Connector节点添加<strong>URIEncoding=”UTF-8”</strong></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> <span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2、单机多实例配置"><a href="#2、单机多实例配置" class="headerlink" title="2、单机多实例配置"></a>2、单机多实例配置</h4><blockquote>
<p>修改新实例的运行端口号</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">"8005"</span> <span class="attr">shutdown</span>=<span class="string">"SHUTDOWN"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> <span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8009"</span> <span class="attr">protocol</span>=<span class="string">"AJP/1.3"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3、环境变量配置"><a href="#3、环境变量配置" class="headerlink" title="3、环境变量配置"></a>3、环境变量配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 实例一</span></span><br><span class="line">export CATALINA_BASE=/home/web/own/superweb.club</span><br><span class="line">export CATALINA_HOME=/home/web/own/superweb.club</span><br><span class="line">export TOMCAT_HOME=/home/web/own/superweb.club</span><br><span class="line"><span class="meta">#</span><span class="bash"> 实例二</span></span><br><span class="line">export CATALINA_2_BASE=/home/web/own/superweb2.club</span><br><span class="line">export CATALINA_2_HOME=/home/web/own/superweb2.club</span><br><span class="line">export TOMCAT_2_HOME=/home/web/own/superweb2.club</span><br></pre></td></tr></table></figure>



<h3 id="四、vsftpd"><a href="#四、vsftpd" class="headerlink" title="四、vsftpd"></a>四、vsftpd</h3><h4 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y vsftpd</span><br></pre></td></tr></table></figure>

<h4 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置文件修改如下:</span></span><br><span class="line"></span><br><span class="line">local_root=/product/ftpfile</span><br><span class="line"><span class="meta">#</span><span class="bash">chroot_local_user=YES </span></span><br><span class="line">anon_root=/product/ftpfile</span><br><span class="line">use_localtime=YES</span><br><span class="line">chroot_local_user=NO</span><br><span class="line">chroot_list_enable=YES</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定目录</span></span><br><span class="line">chroot_list_file=/etc/vsftpd/chroot_list</span><br></pre></td></tr></table></figure>

<h4 id="3、创建Ftp用户"><a href="#3、创建Ftp用户" class="headerlink" title="3、创建Ftp用户"></a>3、创建Ftp用户</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加ftpuser，指定用户目录，没有登陆权限</span></span><br><span class="line">sudo useradd ftpuser -d ftpfile -s /sbin/nologin</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将ftpfile文件(夹)的拥有者改成ftpuser组的ftpuser用户</span></span><br><span class="line">sudo chown -R ftpuser.ftpuser ftpfile</span><br></pre></td></tr></table></figure>

<h4 id="4、配置问题"><a href="#4、配置问题" class="headerlink" title="4、配置问题"></a>4、配置问题</h4><blockquote>
<p><strong>新建用户530错误</strong></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/pam.d/vsftpd #注释掉#auth   required    pam_shells.so</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>如果启用chroot,必须保证ftp根目录不可写,这样对于ftp根目录直接为网站根目录的用户不方便,所以建议假如ftp根目录是/home/${cjh},则将访问权限改写如下</strong></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod a-w /home/cjh</span><br></pre></td></tr></table></figure>

<h3 id="五、MySQL"><a href="#五、MySQL" class="headerlink" title="五、MySQL"></a>五、MySQL</h3><h4 id="1、安装-1"><a href="#1、安装-1" class="headerlink" title="1、安装"></a>1、安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mysql-server-5.7</span><br></pre></td></tr></table></figure>

<h4 id="2、字符、远程访问配置"><a href="#2、字符、远程访问配置" class="headerlink" title="2、字符、远程访问配置"></a>2、字符、远程访问配置</h4><ul>
<li><strong>CentOS</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> MySQL配置文件</span></span><br><span class="line">vim  /etc/my.cnf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在配置文件添加:</span></span><br><span class="line">[mysqld]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_general_ci</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"><span class="meta">#</span><span class="bash"> 管理MySQL状态</span></span><br><span class="line">(sudo) service mysqld [restart,stop,start]</span><br><span class="line"><span class="meta">#</span><span class="bash"> MySQL开机启动</span></span><br><span class="line">chkconfig mysqld on</span><br><span class="line"><span class="meta">#</span><span class="bash"> 为root账号设置密码</span></span><br><span class="line">/usr/bin/mysqladmin -u root password 'new-password'</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Ubuntu</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> MySQL配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 服务端 /etc/mysql/mysql.conf.d/mysqld.cnf  </span></span><br><span class="line">	character-set-server=utf8</span><br><span class="line">	collation-server=utf8_general_ci</span><br><span class="line"><span class="meta">	#</span><span class="bash"> <span class="built_in">bind</span>-address = 127.0.0.1 <span class="comment">#开启远程访问，监听其他IP</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端 /etc/mysql/conf.d/mysql.cnf</span></span><br><span class="line">	default-character-set=utf8 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 管理MySQL状态</span></span><br><span class="line">(sudo) service mysqld [restart,stop,start]</span><br><span class="line"><span class="meta">#</span><span class="bash"> MySQL开机启动</span></span><br><span class="line">	update-rc.d mysql defaults</span><br><span class="line"><span class="meta">#</span><span class="bash"> 为root账号设置密码</span></span><br><span class="line">/usr/bin/mysqladmin -u root password 'new-password'</span><br></pre></td></tr></table></figure>

<h4 id="3、实例化数据库"><a href="#3、实例化数据库" class="headerlink" title="3、实例化数据库"></a>3、实例化数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建立用户，指定用户名、主机和密码</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> username@host <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'passsword'</span>	</span><br><span class="line"><span class="comment">-- 建立数据库，指定字符集</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> database_name <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8 <span class="keyword">collate</span> utf8_general_ci;</span><br><span class="line"><span class="comment">-- 赋予用户权限</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> table_name.* <span class="keyword">to</span> username@localhost <span class="keyword">identified</span> <span class="keyword">by</span>  <span class="string">'passwoed'</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>; <span class="comment">--刷新系统权限表</span></span><br><span class="line"><span class="comment">-- 修改用户密码</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> username@host <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'passwoed'</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">password</span> <span class="keyword">for</span> username@host=<span class="keyword">password</span>(<span class="string">'passwoed'</span>);</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>; <span class="comment">--刷新系统权限表</span></span><br><span class="line"><span class="comment">-- 录入SQL文件</span></span><br><span class="line">source sql_file_path</span><br></pre></td></tr></table></figure>

<h3 id="六、Nginx（CentOS）"><a href="#六、Nginx（CentOS）" class="headerlink" title="六、Nginx（CentOS）"></a>六、Nginx（CentOS）</h3><h4 id="1、安装-2"><a href="#1、安装-2" class="headerlink" title="1、安装"></a>1、安装</h4><blockquote>
<p><strong><code>yum</code> 安装:</strong> 是在线安装，好处是：安装方式简单，不易出错；</p>
<p><strong><code>源码包</code> 安装:</strong> 是先将 <code>nginx</code> 的源码下载下来，在自己的系统里编译生成可执行文件，然后执行。好处是：因为是在自己的系统上编译的，更符合自己系统的性能，也就是说在自己的系统上执行 <code>nginx</code> 服务性能效率更好。 </p>
</blockquote>
<ul>
<li><strong>源码安装</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖</span></span><br><span class="line">yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入Nginx文件根目录，执行如下命令</span></span><br><span class="line">./configure  --prefix=/usr/local/webserver/nginx #配置具体的目录</span><br><span class="line">make &amp;&amp; make install   #默认安装在/usr/local/nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 管理Ngnix, Nginx安装位置(<span class="variable">$Ngnix</span>)</span></span><br><span class="line"><span class="meta">$</span><span class="bash">Ngnix/sbin/nginx           <span class="comment">#启动 nginx 服务  -s reload  重新加载配置并启动</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">Ngnix/sbin/nginx -s stop   <span class="comment">#停止 nginx 服务</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">Ngnix/sbin/nginx -t	    <span class="comment">#验证配置文件的语法</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>命令安装</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 管理Ngnix</span></span><br><span class="line">service nginx start #启动 nginx 服务</span><br><span class="line">service nginx stop #停止 nginx 服务</span><br><span class="line">service nginx restart #重启 nginx 服务</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>卸载方式</strong></li>
</ul>
<blockquote>
<p>*<em>在线安装: *</em>可以通过命令 <code>rpm -e nginx</code> 来卸载; 可以尝试 <code>rpm -e --nodeps nginx</code> 不考虑依赖问题卸载 </p>
</blockquote>
<blockquote>
<p><strong>源码安装:</strong>通常都放在 <code>/usr/local/包名</code> 路径下， 不会有任何垃圾文件存在。 删除该文件夹即可。</p>
</blockquote>
<h4 id="2、文件配置"><a href="#2、文件配置" class="headerlink" title="2、文件配置"></a>2、文件配置</h4><p><strong>在$Ngnix/conf/nginx.conf</strong> 中添加(Nginx安装位置($Ngnix)):</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">include vhost/*.conf;</span><br></pre></td></tr></table></figure>

<p><strong>在配置文件vhost中</strong>添加配置文件test.conf，基本内容如下:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nginx多主机请求分发</span></span><br><span class="line"><span class="attribute">upstream</span> superweb.club &#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">127.0.0.1:9080</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个服务实例</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;<span class="comment"># 监听port</span></span><br><span class="line">    <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">server_name</span> superweb.club www.superweb.club; <span class="comment"># 定义访问名称</span></span><br><span class="line">    <span class="attribute">access_log</span> /usr/local/nginx/logs/access.log combined;</span><br><span class="line">    <span class="attribute">index</span> index.html index.htm index.jsp index.php;</span><br><span class="line">    <span class="attribute">if</span> ( <span class="variable">$query_string</span> <span class="regexp">~* ".*[\;'\&lt;\&gt;].*"</span> )&#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="number">404</span>;</span><br><span class="line">            &#125;</span><br><span class="line">	<span class="comment">#默认请求</span></span><br><span class="line">    <span class="attribute">location</span> = / &#123;</span><br><span class="line">            <span class="attribute">root</span> /product/frontend/mmall-fe/dist/view; <span class="comment"># 请求本地文件的位置</span></span><br><span class="line">            <span class="comment"># 定义首页索引文件的名称</span></span><br><span class="line">            <span class="attribute">index</span> index.html;</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># expires 7d; 有效时间</span></span><br><span class="line">            <span class="comment"># add_header Access-Control-Allow-Origin *; 添加请求头文件参数(跨域时配置)</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># 定义错误提示页面</span></span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">#静态文件，nginx自己处理</span></span><br><span class="line">     <span class="attribute">location</span> <span class="regexp">~ ^/(images|javascript|js|css|flash|media|static)/</span> &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">#过期30天，静态文件不怎么更新，过期可以设大一点，</span></span><br><span class="line">            <span class="comment">#如果频繁更新，则可以设置得小一点。</span></span><br><span class="line">            <span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#禁止访问 .htxxx 文件</span></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ /.ht</span> &#123;</span><br><span class="line">            <span class="attribute">deny</span> all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、使用时问题"><a href="#3、使用时问题" class="headerlink" title="3、使用时问题"></a>3、使用时问题</h4><blockquote>
<p>nginx: [error] open() “/usr/local/nginx/logs/nginx.pid” failed (2: No such file or directory)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解决办法</span></span><br><span class="line">sudo $Nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>

<h3 id="七、Redis"><a href="#七、Redis" class="headerlink" title="七、Redis"></a>七、Redis</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入redis根目录</span></span><br><span class="line">cd redis-dir</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行：</span></span><br><span class="line">make</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入redis根目录下的src目录</span></span><br><span class="line">cd src</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动redis服务.</span></span><br><span class="line">./redis-server [redis.conf] --p port</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动客户端</span></span><br><span class="line">./redis-cli -p port -a password -h host</span><br></pre></td></tr></table></figure>

<h4 id="八、Git配置"><a href="#八、Git配置" class="headerlink" title="八、Git配置"></a>八、Git配置</h4><p><strong>基本配置</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m "first commit"</span><br><span class="line">git config --global user.name 'superweb'</span><br><span class="line">git config --global user.email 'webaihl@gmail.com'</span><br><span class="line">ssh-keygen -C 'webaihl@gmail.com' -t rsa # 生成的密钥文件在主目录，用于和github验证</span><br><span class="line">git remote add origin git@github.com:webaihl/mmall.git # 添加远程分支</span><br><span class="line">git push -u origin master # 推动到远程分支</span><br></pre></td></tr></table></figure>

<p><strong>别名配置</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加别名</span></span><br><span class="line">git config --global   alias.co   checkout;</span><br><span class="line">git config --global   alias.ci   commit;</span><br><span class="line">git config --global   alias.st   status;</span><br><span class="line">git config --global   alias.br   branch;</span><br><span class="line">git config --global   alias.cm   commit;</span><br><span class="line">git config --global   alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit --"</span><br><span class="line">git config --global   core.ui true;</span><br><span class="line">git config --global   core.quotepath false;</span><br><span class="line">git config --global   core.editor vim;</span><br></pre></td></tr></table></figure>

<p><strong>其他操作</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除远程分支  冒号前面的空格不能少，原理是把一个空分支push到server上，相当于删除该分支。	</span></span><br><span class="line">git push origin :branch-name</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除本地文件 可同步到远程</span></span><br><span class="line">git rm  -r</span><br><span class="line"><span class="meta">#</span><span class="bash">在master分支生成v1.0分支</span></span><br><span class="line">git co -b v1.0 origin/master</span><br><span class="line"><span class="meta">#</span><span class="bash">将之前v1.0分支的内容推送到远程</span></span><br><span class="line">git push origin HEAD -u</span><br></pre></td></tr></table></figure>



<h2 id="前端环境配置"><a href="#前端环境配置" class="headerlink" title="前端环境配置"></a>前端环境配置</h2><h3 id="一、node-js"><a href="#一、node-js" class="headerlink" title="一、node.js"></a>一、node.js</h3><blockquote>
<p>去<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">官网</a>找到最新的或者是您想要的node.js版本，复制url，在CentOS中用wget下载。 </p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取源码包</span></span><br><span class="line">wget https://nodejs.org/dist/v8.9.4/node-v8.9.4.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash">解压 </span></span><br><span class="line">tar -zxvf node-v8.9.4.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入包目录</span></span><br><span class="line">cd node-v8.9.4</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进行配置 </span></span><br><span class="line">./configure</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译</span></span><br><span class="line">make</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">sudo make install</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查</span></span><br><span class="line">node -v </span><br><span class="line">npm  -v</span><br></pre></td></tr></table></figure>

<h3 id="二、Ruby"><a href="#二、Ruby" class="headerlink" title="二、Ruby"></a>二、Ruby</h3><p><strong>命令安装</strong></p>
<blockquote>
<p> apt（Debian 或 Ubuntu）Debian GNU/Linux 和 Ubuntu 使用 apt 包管理器。用法如下：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ruby-full</span><br></pre></td></tr></table></figure>

<blockquote>
<p>yum（CentOS、Fedora 或 RHEL） CentOS、Fedora 和 RHEL 使用 yum 包管理器。用法如下：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install ruby</span><br></pre></td></tr></table></figure>

<p><strong>源码安装</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入软件根目录运行配置、编译、安装</span></span><br><span class="line">./configure</span><br><span class="line"> make</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 用ruby安装sass</span></span><br><span class="line">gem install sass</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查sass是否安装成功</span></span><br><span class="line">sass -v</span><br></pre></td></tr></table></figure>

<h3 id="三、初始化"><a href="#三、初始化" class="headerlink" title="三、初始化"></a>三、初始化</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.全局安装webpack v2.x</span><br><span class="line">    命令: (sudo) npm install -g webpack</span><br><span class="line"></span><br><span class="line">2.全局安装webpack-dev-server</span><br><span class="line">    命令: (sudo) npm install -g webpack-dev-server</span><br><span class="line"></span><br><span class="line">3.在项目根目录执行npm初始化</span><br><span class="line">    命令: npm install (--registry=https://registry.npm.taobao.org)</span><br><span class="line"></span><br><span class="line">4.启动项目</span><br><span class="line">    开发模式: npm run dev (windows系统上为npm run dev_win)</span><br><span class="line">    生产模式: npm run dist (windows系统上为npm run dist_win)</span><br><span class="line"></span><br><span class="line">5.开发模式下预览项目</span><br><span class="line">    访问：http://localhost:8086/dist/view/index.html</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Liunx</category>
      </categories>
      <tags>
        <tag>Liunx</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Java连接数据库</title>
    <url>/2017/06/20/Java%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p>[TOC]</p>
<h3 id="一、Java连接数据库"><a href="#一、Java连接数据库" class="headerlink" title="一、Java连接数据库"></a>一、Java连接数据库</h3><a id="more"></a>

<h4 id="1、Oracle8-8i-9i数据库（thin模式）"><a href="#1、Oracle8-8i-9i数据库（thin模式）" class="headerlink" title="1、Oracle8/8i/9i数据库（thin模式）"></a>1、Oracle8/8i/9i数据库（thin模式）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">"oracle.jdbc.driver.OracleDriver"</span>).newInstance(); </span><br><span class="line">String url=<span class="string">"jdbc:oracle:thin:@localhost:1521:orcl"</span>; </span><br><span class="line"><span class="comment">//orcl为数据库的SID </span></span><br><span class="line">String user=<span class="string">"test"</span>; </span><br><span class="line">String password=<span class="string">"test"</span>; </span><br><span class="line">Connection conn= DriverManager.getConnection(url,user,password);</span><br></pre></td></tr></table></figure>

<h4 id="2、MySQL数据库"><a href="#2、MySQL数据库" class="headerlink" title="2、MySQL数据库"></a>2、MySQL数据库</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">"org.gjt.mm.mysql.Driver"</span>).newInstance(); </span><br><span class="line">String url =<span class="string">"jdbc:mysql://localhost/myDB?user=soft&amp;password=soft1234&amp;useUnicode=true&amp;characterEncoding=8859_1"</span> </span><br><span class="line"><span class="comment">//myDB为数据库名 </span></span><br><span class="line">Connection conn= DriverManager.getConnection(url);</span><br></pre></td></tr></table></figure>

<h4 id="3、Sql-Server7-0-2000数据库"><a href="#3、Sql-Server7-0-2000数据库" class="headerlink" title="3、Sql Server7.0/2000数据库"></a>3、Sql Server7.0/2000数据库</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">"com.microsoft.jdbc.sqlserver.SQLServerDriver"</span>).newInstance(); </span><br><span class="line">String url=<span class="string">"jdbc:microsoft:sqlserver://localhost:1433;DatabaseName=mydb"</span>; </span><br><span class="line"><span class="comment">//mydb为数据库 </span></span><br><span class="line">String user=<span class="string">"sa"</span>; </span><br><span class="line">String password=<span class="string">""</span>; </span><br><span class="line">Connection conn= DriverManager.getConnection(url,user,password);</span><br></pre></td></tr></table></figure>



<h4 id="4、Sybase数据库"><a href="#4、Sybase数据库" class="headerlink" title="4、Sybase数据库"></a>4、Sybase数据库</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">"com.sybase.jdbc.SybDriver"</span>).newInstance(); </span><br><span class="line">String url =<span class="string">" jdbc:sybase:Tds:localhost:5007/myDB"</span>; </span><br><span class="line"><span class="comment">//myDB为你的数据库名 </span></span><br><span class="line">Properties sysProps = System.getProperties(); </span><br><span class="line">SysProps.put(<span class="string">"user"</span>,<span class="string">"userid"</span>); </span><br><span class="line">SysProps.put(<span class="string">"password"</span>,<span class="string">"user_password"</span>); </span><br><span class="line">Connection conn= DriverManager.getConnection(url, SysProps);</span><br></pre></td></tr></table></figure>



<h4 id="5、Informix数据库"><a href="#5、Informix数据库" class="headerlink" title="5、Informix数据库"></a>5、Informix数据库</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">"com.informix.jdbc.IfxDriver"</span>).newInstance(); </span><br><span class="line">String url = <span class="string">"jdbc:informix-sqli://123.45.67.89:1533/myDB:INFORMIXSERVER=myserver; </span></span><br><span class="line"><span class="string">user=testuser;password=testpassword"</span>; </span><br><span class="line"><span class="comment">//myDB为数据库名 </span></span><br><span class="line">Connection conn= DriverManager.getConnection(url);</span><br></pre></td></tr></table></figure>



<h4 id="6、PostgreSQL数据库"><a href="#6、PostgreSQL数据库" class="headerlink" title="6、PostgreSQL数据库"></a>6、PostgreSQL数据库</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">"org.postgresql.Driver"</span>).newInstance(); </span><br><span class="line">String url =<span class="string">"jdbc:postgresql://localhost/myDB"</span> </span><br><span class="line"><span class="comment">//myDB为数据库名 </span></span><br><span class="line">String user=<span class="string">"myuser"</span>; </span><br><span class="line">String password=<span class="string">"mypassword"</span>; </span><br><span class="line">Connection conn= DriverManager.getConnection(url,user,password);</span><br></pre></td></tr></table></figure>



<h4 id="7、DB2数据库"><a href="#7、DB2数据库" class="headerlink" title="7、DB2数据库"></a>7、DB2数据库</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">"com.ibm.db2.jdbc.app.DB2Driver "</span>).newInstance(); </span><br><span class="line">String url=<span class="string">"jdbc:db2://localhost:5000/sample"</span>; </span><br><span class="line"><span class="comment">//sample为你的数据库名 </span></span><br><span class="line">String user=<span class="string">"admin"</span>;</span><br><span class="line">String password=<span class="string">""</span>;</span><br><span class="line">Connection conn= DriverManager.getConnection(url,user,password);</span><br></pre></td></tr></table></figure>

<h3 id="二、Java数据库操作"><a href="#二、Java数据库操作" class="headerlink" title="二、Java数据库操作"></a>二、Java数据库操作</h3><blockquote>
<p>以<strong>MySQL</strong>为例   </p>
</blockquote>
<h4 id="1、查询数据库"><a href="#1、查询数据库" class="headerlink" title="1、查询数据库"></a>1、查询数据库</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Connection conn = DriverManager.getConnection(url,    <span class="string">"root"</span>,<span class="string">""</span>);<span class="comment">//创建连接对象</span></span><br><span class="line">Statement stmt = conn.createStatement(); <span class="comment">//创建Statement对象</span></span><br><span class="line">String sql = <span class="string">"select * from stu"</span>;    <span class="comment">//要执行的SQL</span></span><br><span class="line">ResultSet rs = stmt.executeQuery(sql);<span class="comment">//创建数据结果集对象</span></span><br><span class="line"><span class="keyword">while</span> (rs.next())&#123; </span><br><span class="line">  <span class="comment">//遍历结果集，获取所需数据</span></span><br><span class="line">&#125;</span><br><span class="line">rs.close();</span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();<span class="comment">//先连接后关闭</span></span><br></pre></td></tr></table></figure>

<h4 id="2、更新数据库"><a href="#2、更新数据库" class="headerlink" title="2、更新数据库"></a>2、更新数据库</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Connection conn = DriverManager.getConnection(url,    <span class="string">"root"</span>,<span class="string">""</span>);<span class="comment">//创建连接对象</span></span><br><span class="line">Statement stmt = conn.createStatement(); <span class="comment">//创建Statement对象</span></span><br><span class="line">String sql = <span class="string">"delete from stu"</span>;    <span class="comment">//要执行的SQL</span></span><br><span class="line"><span class="keyword">int</span> result = stmt.executeUpdate(sql);<span class="comment">//返回受影响的记录数</span></span><br><span class="line">rs.close();</span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();<span class="comment">//先连接后关闭</span></span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Java</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构实现原理</title>
    <url>/2017/06/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="数据结构实现原理"><a href="#数据结构实现原理" class="headerlink" title="数据结构实现原理"></a>数据结构实现原理</h2><p>[TOC]</p>
<a id="more"></a>

<h3 id="一、集合"><a href="#一、集合" class="headerlink" title="一、集合"></a>一、集合</h3><ul>
<li>Collection(单列集合)</li>
<li>List(有序,可重复)</li>
</ul>
<ol>
<li><p>ArrayList底层数据结构是<strong>数组</strong>,查询快,增删慢线程不安全,效率高</p>
</li>
<li><p>Vector底层数据结构是<strong>数组</strong>,查询快,增删慢线程安全,效率低LinkedList底层数据结构是链表,查询慢,增删快线程不安全,效率高</p>
</li>
<li><p>Set(无序,唯一)</p>
</li>
<li><p>HashSet底层数据结构是<strong>哈希表</strong>。哈希表依赖两个方法：hashCode()和equals()执行顺序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">首先判断hashCode()值是否相同 </span><br><span class="line">	是：继续执行equals(),看其返回值</span><br><span class="line">		是true:说明元素重复，不添加</span><br><span class="line">		是false:就直接添加到集合</span><br><span class="line">	否：就直接添加到集合</span><br><span class="line">最终：自动生成hashCode()和equals()即可</span><br></pre></td></tr></table></figure>
</li>
<li><p>LinkedHashSet底层数据结构由<strong>链表和哈希表</strong>组成。由链表保证元素有序。由哈希表保证元素唯一</p>
</li>
<li><p>TreeSet底层数据结构是红黑树。(是一种自平衡的二叉树)如何保证元素唯一性呢?</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">根据比较的返回值是否是0来决定如何保证元素的排序呢?两种方式自然排序(元素具备比较性)让元素所属的类实现Comparable接口比较器排序(集合具备比较性)让集合接收一个Comparator的实现类对象Map(双列集合).</span><br><span class="line">  A:Map集合的数据结构仅仅针对键有效，与值无关。</span><br><span class="line">  B:存储的是键值对形式的元素，键唯一，值可重复。</span><br></pre></td></tr></table></figure>
</li>
<li><p>HashMap底层数据结构是<strong>哈希表</strong>。线程不安全，效率高哈希表依赖两个方法：</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hashCode()和equals()执行顺序：</span><br><span class="line">首先判断hashCode()值是否相同</span><br><span class="line">是：继续执行equals(),看其返回值</span><br><span class="line">       是true:说明元素重复，不添加</span><br><span class="line">       是false:就直接添加到集合</span><br><span class="line">   否：就直接添加到集合。</span><br><span class="line">最终：自动生成hashCode()和equals()即可LinkedHashMap底层数据结构由链表和哈希表组成。由链表保证元素有序。由哈希表保证元素唯一。</span><br></pre></td></tr></table></figure>



<ol>
<li><p>Hashtable底层数据结构是<strong>哈希表</strong>。线程安全，效率低哈希表依赖两个方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hashCode()和equals()执行顺序：首先判断hashCode()值是否相同</span><br><span class="line">	是：继续执行equals(),看其返回值</span><br><span class="line">		是true:说明元素重复，不添加</span><br><span class="line">		是false:就直接添加到集合</span><br><span class="line">    否：就直接添加到集合</span><br><span class="line"> 最终：自动生成hashCode()和equals()即可</span><br></pre></td></tr></table></figure>
</li>
<li><p>TreeMap底层数据结构是<strong>红黑树</strong>。(是一种自平衡的二叉树)如何保证元素唯一性呢?</p>
<p>​    根据比较的返回值是否是0来决定如何保证元素的排序呢?两种方式自然排序(元素具备比较性)让元素所属的类实现Comparable接口比较器排序(集合具备比较性)让集合接收一个Comparator的实现类对象</p>
</li>
</ol>
<h3 id="二、-集合选择。"><a href="#二、-集合选择。" class="headerlink" title="二、 集合选择。"></a>二、 集合选择。</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">是否是键值对象形式:</span><br><span class="line">	是：Map键是否需要排序:</span><br><span class="line">		是：TreeMap</span><br><span class="line">   	否：HashMap</span><br><span class="line">   	不知道，就使用HashMap。</span><br><span class="line">   否：Collection元素是否唯一:</span><br><span class="line">   	是：Set元素是否需要排序:</span><br><span class="line">   		是：TreeSet</span><br><span class="line">   		否：HashSet</span><br><span class="line">   		不知道，就使用HashSet</span><br><span class="line">   	否：List要安全吗:</span><br><span class="line">   		是：Vector   </span><br><span class="line">   		否：ArrayList或者LinkedList</span><br><span class="line">   			增删多：LinkedList</span><br><span class="line">   			查询多：ArrayList</span><br><span class="line">   			不知道，就使用ArrayList</span><br><span class="line">   		不知道，就使用ArrayList</span><br></pre></td></tr></table></figure>

<h3 id="三、集合的常见方法及遍历方式"><a href="#三、集合的常见方法及遍历方式" class="headerlink" title="三、集合的常见方法及遍历方式"></a>三、集合的常见方法及遍历方式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection: </span><br><span class="line">	方法:add(), remove(), contains(), iterator(), size()</span><br><span class="line">	遍历：增强<span class="keyword">for</span>迭代器|--Listget()遍历：普通<span class="keyword">for</span>|--</span><br><span class="line">SetMap:</span><br><span class="line">方法:put(),remove(),containskey(),containsValue(),keySet(),get(),value(),entrySet(),size()</span><br><span class="line">遍历：根据键找值根据键值对对象分别找键和值.</span><br></pre></td></tr></table></figure>



<p>PS:</p>
<p>​    1.其中的Arralist  代码中大量的用了System.arraycopy () 方法 进行数组进行复制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index, numMoved);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven</title>
    <url>/2017/06/03/Maven/</url>
    <content><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><p>[TOC]</p>
<blockquote>
<p><a href="http://baike.baidu.com/item/Maven" target="_blank" rel="noopener">Maven</a>项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件<a href="http://baike.baidu.com/item/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7" target="_blank" rel="noopener">项目管理工具</a>。</p>
</blockquote>
<a id="more"></a>

<h3 id="一、常用命令"><a href="#一、常用命令" class="headerlink" title="一、常用命令"></a>一、常用命令</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">mvn archetype：create 创建Maven项目</span><br><span class="line">mvn compile 编译源代码</span><br><span class="line">mvn deploy 发布项目</span><br><span class="line">mvn test-compile 编译测试源代码</span><br><span class="line">mvn test 运行应用程序中的单元测试</span><br><span class="line">mvn site 生成项目相关信息的网站</span><br><span class="line">mvn clean 清除项目目录中的生成结果</span><br><span class="line">mvn <span class="keyword">package</span> 根据项目生成的jar</span><br><span class="line">mvn install 在本地Repository中安装jar</span><br><span class="line">mvn <span class="string">eclipse:</span>eclipse 生成eclipse项目文件</span><br><span class="line">mvn <span class="string">jetty:</span>run 启动jetty服务</span><br><span class="line">mvn <span class="string">tomcat:</span>run 启动tomcat服务</span><br><span class="line">mvn clean <span class="keyword">package</span> -Dmaven.test.skip=<span class="string">true:</span>清除以前的包后重新打包，跳过测试类</span><br></pre></td></tr></table></figure>

<h3 id="二、依赖管理"><a href="#二、依赖管理" class="headerlink" title="二、依赖管理"></a>二、依赖管理</h3><h4 id="pom-xml的基本结构"><a href="#pom-xml的基本结构" class="headerlink" title="pom.xml的基本结构"></a>pom.xml的基本结构</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--指定了当前pom的版本--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--坐标信息  start--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>反写的公司网址+项目名<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> <span class="comment">&lt;!--主项目标识--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>项目名+模块名<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--第一个0表示大版本号</span></span><br><span class="line"><span class="comment">    第二个0表示分支版本号</span></span><br><span class="line"><span class="comment">    第三个0标识小版本号</span></span><br><span class="line"><span class="comment">    0.0.1SNAPSHOT</span></span><br><span class="line"><span class="comment">    snapshot快照</span></span><br><span class="line"><span class="comment">    alpha内测</span></span><br><span class="line"><span class="comment">    beta公测</span></span><br><span class="line"><span class="comment">    Release稳定</span></span><br><span class="line"><span class="comment">    GA正式发布</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--打包方式：默认是jar</span></span><br><span class="line"><span class="comment">    war  zip  pom</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span><span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--坐标信息  end--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--项目描述名--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hi<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--项目地址--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--项目描述--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--开发人员列表--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">developers</span>&gt;</span><span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--许可证信息--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">license</span>&gt;</span><span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--组织信息--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">organization</span>&gt;</span><span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--依赖列表--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--依赖项--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--项目坐标 start--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span><span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span><span class="comment">&lt;!--指依赖范围--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--设置依赖范围是否可选：默认false--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">optional</span>&gt;</span><span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--排除依赖传递列表--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--项目坐标 end--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--依赖的管理--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--不会运行，即不会调用到依赖中</span></span><br><span class="line"><span class="comment">    一般定义在父模块中，供子模块调用</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--提供支持--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--插件列表--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--坐标--&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                              <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--插件配置--&gt;</span></span><br><span class="line">                       	 <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">		  			 		<span class="tag">&lt;<span class="name">port</span>&gt;</span>8889<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">		  			 	<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--子模块对父模块的继承--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--聚合多个模块进行编译，可多个子项--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span><span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="三、maven基本配置"><a href="#三、maven基本配置" class="headerlink" title="三、maven基本配置"></a>三、maven基本配置</h3><h4 id="setting配置"><a href="#setting配置" class="headerlink" title="setting配置"></a>setting配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 本地仓库的设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:/maven/my_local_repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 远程仓库的镜像配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>UK<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">          	<span class="comment">&lt;!-- 地址 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://uk.maven.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Junit</title>
    <url>/2017/06/03/Junit/</url>
    <content><![CDATA[<h2 id="Junit"><a href="#Junit" class="headerlink" title="Junit"></a>Junit</h2><p>[TOC]</p>
<blockquote>
<p><strong>对代码进行单元测试</strong></p>
</blockquote>
<blockquote>
<p><strong>测试目录结构必须与 代码主目录结构一样</strong></p>
</blockquote>
<a id="more"></a>

<h4 id="一、目录结构"><a href="#一、目录结构" class="headerlink" title="一、目录结构"></a>一、目录结构</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> --src</span><br><span class="line"></span><br><span class="line">--main</span><br><span class="line"></span><br><span class="line">	--java 	<span class="comment">//存放主代码</span></span><br><span class="line"></span><br><span class="line">	--resources <span class="comment">//资源</span></span><br><span class="line"></span><br><span class="line">--test</span><br><span class="line"></span><br><span class="line">	--java <span class="comment">//测试代码</span></span><br><span class="line"></span><br><span class="line">        --resources <span class="comment">//测试资源</span></span><br></pre></td></tr></table></figure>



<h4 id="二、Junit常用注解"><a href="#二、Junit常用注解" class="headerlink" title="二、Junit常用注解"></a>二、Junit常用注解</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//必须是void类型</span></span><br><span class="line"><span class="meta">@Test</span>  <span class="comment">//测试</span></span><br><span class="line"><span class="meta">@Ignore</span> <span class="comment">//忽略该测试方法 </span></span><br><span class="line"><span class="meta">@Test</span>(timeout=毫秒) <span class="comment">//限制测试方法运行的时间</span></span><br><span class="line"><span class="meta">@Test</span>(expected=ArithmeticException<span class="class">.<span class="keyword">class</span>) //捕捉测试方法的异常</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">void</span> <span class="title">testFun</span>()</span>&#123;</span><br><span class="line">   <span class="comment">/***</span></span><br><span class="line"><span class="comment">   *	测试代码 // TestCase.assertEquals(预期值, 输出值);</span></span><br><span class="line"><span class="comment">   ***/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="三、Junit运行流程"><a href="#三、Junit运行流程" class="headerlink" title="三、Junit运行流程"></a>三、Junit运行流程</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@BeforeClass</span> <span class="comment">//测试类加载时加载，只调用一次</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setUpBeforeClass</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">		System.out.println(<span class="string">"BeforeClass()...."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AfterClass</span> <span class="comment">//测试类结束时加载，只调用一次</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tearDownAfterClass</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"AfterClass....."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Before</span> <span class="comment">//方法调用前加载，每调用一次方法，加载一次</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"before......"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@After</span> <span class="comment">//方法调用后加载，每调用一次方法，加载一次</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"after...."</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Junit</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反射</title>
    <url>/2017/06/03/Java%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>[TOC]</p>
<blockquote>
<p>反射，在运行时获得<strong>任何</strong>一个类的属性和方法，并且可以 加以调用。</p>
</blockquote>
<a id="more"></a>

<h4 id="一、获得反射的方法"><a href="#一、获得反射的方法" class="headerlink" title="一、获得反射的方法"></a>一、获得反射的方法</h4><ul>
<li><p>通过 <strong>对象 ** 获得类的 **类类型</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A a = <span class="keyword">new</span> A();</span><br><span class="line">Class c = a.getClass();</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过 <strong>使用类名调用 类的静态变量 class</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c = Foo<span class="class">.<span class="keyword">class</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过 <strong>Class.forName()</strong>  动态加载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">c = <span class="class"><span class="keyword">class</span>.<span class="title">forName</span>('包名.类名')</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="二、通过-类类型-获得方法的信息"><a href="#二、通过-类类型-获得方法的信息" class="headerlink" title="二、通过 类类型  获得方法的信息"></a>二、通过 <strong>类类型</strong>  获得方法的信息</h4><ul>
<li><p>获得方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***	</span></span><br><span class="line"><span class="comment">   * getMethods() 获得所有的方法，以及继承的public方法</span></span><br><span class="line"><span class="comment">   * getDeclaredMethods() 获得自身定义的方法，不问访问修饰符</span></span><br><span class="line"><span class="comment">   ***/</span>	</span><br><span class="line">Method[] methods = c.getMethods();</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回值类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获得方法的返回值类型,返回的是 返回类型的 类类型</span></span><br><span class="line">Class retureType = method.getReturnType();</span><br></pre></td></tr></table></figure>
</li>
<li><p>参数类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//得到方法的参数类型, 参数列表的 类类型</span></span><br><span class="line">TypeVariable&lt;Method&gt;[] paramType = method.getTypeParameters();</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="三、类的成员变量"><a href="#三、类的成员变量" class="headerlink" title="三、类的成员变量"></a>三、类的成员变量</h4><ul>
<li><p>获得成员变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 获取成员变量</span></span><br><span class="line"><span class="comment"> * getFields() 获得public的成员变量</span></span><br><span class="line"><span class="comment"> * getDeclaredFields() 获得自身定义的所有成员变量</span></span><br><span class="line"><span class="comment"> ***/</span></span><br><span class="line"></span><br><span class="line">  Field[] fields = c.getDeclaredFields();<span class="comment">//c.getFields();</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>变量类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获得变量类型的 类类型</span></span><br><span class="line">  Class type = field.getType();</span><br></pre></td></tr></table></figure>
</li>
<li><p>变量名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取成员变量的名字</span></span><br><span class="line">  String fieldName = field.getName();</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="四、构造函数"><a href="#四、构造函数" class="headerlink" title="四、构造函数"></a>四、构造函数</h4><ul>
<li><p>获得构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">	 * 获得构造函数的信息</span></span><br><span class="line"><span class="comment">	 * getDeclaredConstructors()获得所有的构造函数</span></span><br><span class="line"><span class="comment">	 * 构造函数没有返回值类型</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"> Constructor[] cs = c.getDeclaredConstructors();</span><br></pre></td></tr></table></figure>
</li>
<li><p>构造函数的参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获得构造函数的参数-----&gt;类类型</span></span><br><span class="line">  Parameter[] params = constructor.getParameters();</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="五、利用反射调用方法"><a href="#五、利用反射调用方法" class="headerlink" title="五、利用反射调用方法"></a>五、利用反射调用方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A a = <span class="keyword">new</span> A();</span><br><span class="line"><span class="comment">// 获得方法所在类的 类类型 </span></span><br><span class="line">Class   c = a.getClass();</span><br><span class="line"><span class="comment">//获得指定方法  </span></span><br><span class="line"><span class="comment">// Method m1 = c.getMethod("print", int.class, int.class);</span></span><br><span class="line">Method  m = c.getMethod(<span class="string">"方法名"</span>, <span class="string">"参数组的 类类型"</span> );</span><br><span class="line"><span class="comment">//返回值，没有为 Null</span></span><br><span class="line"><span class="comment">// Object o2 = m1.invoke(a, 1, 2);</span></span><br><span class="line">Object  o = m.invoke(<span class="string">"操作的对象名"</span>, <span class="string">"参数组"</span>)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>反射</tag>
      </tags>
  </entry>
</search>
